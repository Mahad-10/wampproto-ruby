module Wampproto
  module Auth
    # generates wampcra authentication signature
    class Cryptosign < Base
      @private_key: String

      @key_pair: untyped

      include Helpers
      extend Helpers::ClassMethods

      attr_reader private_key: String

      attr_accessor channel_id: String

      AUTH_METHOD: "cryptosign"

      def initialize: (String private_key, String authid, ?::Hash[Symbol, untyped] authextra) -> void

      def authenticate: (Wampproto::Message::Challenge challenge) -> Wampproto::Message::Authenticate

      def self.create_challenge: () -> (::Integer | ::Float | ::String | nil)

      def self.verify_challenge: (String signature, String msg, String public_key) -> bool

      def self.sign_challenge: (String private_key, String challenge, ?String? channel_id) -> String

      def self.create_signature: (String private_key, String challenge, ?String? channel_id) -> untyped

      def self.handle_without_channel_binding: (String private_key, String hex_challenge) -> ::String

      def self.handle_channel_binding: (String private_key, String hex_challenge, String channel_id) -> ::String

      def self.xored_strings: (String channel_id, String challenge_str) -> String
    end
  end
end

